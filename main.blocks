<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="2vBG7R1L_gvYL6/GG,sJ" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="+*](ERty^$BJB-cx=TW-" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace lora{" line1="" line2="    //% block=&quot;Connexion au système Lora || RX $Rx TX $Tx&quot;" line3="    //% expandableArgumentMode=&quot;toggle&quot;" line4="    //% Rx.defl=SerialPin.P0 Tx.defl=SerialPin.P14" line5="    export function connect_lora(Rx: SerialPin, Tx: SerialPin): void {" line6="        basic.showIcon(IconNames.Asleep)" line7="        basic.pause(3000)" line8="        serial.setRxBufferSize(100)" line9="        serial.redirect(" line10="        Tx," line11="        Rx," line12="        BaudRate.BaudRate1200" line13="        )" line14="        basic.pause(500)" line15="        basic.showIcon(IconNames.SmallSquare)" line16="        let reception = &quot;&quot;" line17="        while (reception == &quot;&quot;) {" line18="            serial.writeString(&quot;ok#&quot;)" line19="            reception = serial.readUntil(serial.delimiters(Delimiters.Hash))" line20="            if (reception == &quot;ok&quot;) { " line21="                basic.showString(&quot;C&quot;)" line22="            }" line23="            else {" line24="                basic.showIcon(IconNames.Square)" line25="                basic.pause(500)" line26="                reception = &quot;&quot;" line27="            }" line28="        }" line29="    }" line30="    //% block=&quot;Envoi $donnee&quot;" line31="    //% donnee.defl='essai'" line32="    export function envoi_donnee(donnee: string): void {" line33="        serial.writeString(donnee+&quot;#&quot;)" line34="    }" line35="" line36="    //% block=&quot;Donnee reçue&quot;" line37="    export function donnee_recue(): string {" line38="        return serial.readUntil(serial.delimiters(Delimiters.Hash));" line39="    }" line40="}" numlines="41"></mutation></block></statement></block></xml>